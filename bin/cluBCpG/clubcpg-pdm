#!/gpfs1/tangfuchou_pkuhpc/tangfuchou_coe/xuexiaohui/software/miniconda3/envs/cluBCpG/bin/python

import os
import logging
import argparse
from clubcpg.findPDM import findPassiveDeMethylated

DEBUG = False


def str2bool(v):
    if v.lower() == 'true':
        return True
    elif v.lower() == 'false':
        return False
    else:
        raise argparse.ArgumentTypeError("Boolean value expected.")


# Input params
arg_parser = argparse.ArgumentParser()
arg_parser.add_argument("-a", "--input_bam_A",
                        help="Input control bam file, coordinate sorted with index present")
arg_parser.add_argument("-b", "--input_bam_B",
                        help="Input treatment bam file, coordinate sorted with index present")
arg_parser.add_argument("-r", "--input_fa",
                        help="Input fa file, indexed with fai")
arg_parser.add_argument("-l", "--lower",
                        help="Input lower threshold of methylation level for mosaic pattern, default=0.2", default=0.2)
arg_parser.add_argument("-u", "--upper",
                        help="Input upper threshold of methylation level for mosaic pattern, default=0.8", default=0.8)                       
arg_parser.add_argument("-o", "--output_dir",
                        help="Output directory to save results, defaults to bam file loaction")
arg_parser.add_argument("--bin_size", help="Size of bins to extract and analyze, default=100", default=100)
arg_parser.add_argument("-n", "--num_processors",
                        help="Number of processors to use for analysis, default=1",
                        default=1)
arg_parser.add_argument("-chr", "--chromosome",
                        help="Chromosome to analyze, example: 'chr19', required", default=None)

if __name__ == "__main__":

    # Extract arguments from command line and set as correct types
    args = arg_parser.parse_args()

    input_bam_a_file = args.input_bam_A
    input_bam_b_file = args.input_bam_B
    input_fa_file = args.input_fa
    num_of_processors = int(args.num_processors)
    bin_size = int(args.bin_size)
    lower = float(args.lower)
    upper = float(args.upper)

    if args.chromosome:
        chrom_of_interest = args.chromosome
    else:
        chrom_of_interest = None

    # For now, this will be made required
    assert chrom_of_interest, "Chromosome to analyze must be specified"

    # Set output directory, or use bam file location if not specified
    if args.output_dir:
        BASE_DIR = args.output_dir
    else:
        BASE_DIR = os.path.dirname(input_bam_file)

    # Create output dir if it doesnt exist
    if not os.path.exists(BASE_DIR):
        os.makedirs(BASE_DIR)

    # Setup logging
    outfile_a=os.path.basename(input_bam_a_file)
    outfile_b=os.path.basename(input_bam_b_file)
    log_file = os.path.join(BASE_DIR, "CompleteBins.{}.{}.{}.log".format(outfile_a,outfile_b, chrom_of_interest))
    print("Log file: {}".format(log_file), flush=True)
    logging.basicConfig(filename=log_file, level=logging.DEBUG)

    logging.info(args)

    # Log run input params
    logging.info("Input control bam file: {}".format(input_bam_a_file))
    logging.info("Input treatment bam file: {}".format(input_bam_b_file))
    logging.info("Input fa file: {}".format(input_fa_file))
    logging.info("Input lower threshold of methylation level for mosaic pattern: {}".format(lower))
    logging.info("Input upper threshold of methylation level for mosaic pattern: {}".format(upper))
    logging.info("Chromosome specified: {}".format(chrom_of_interest))
    logging.info("Bin size: {}".format(bin_size))
    logging.info("Number of processors: {}".format(num_of_processors))

    # Perform the analysis
    calc = findPassiveDeMethylated(input_bam_a_file,input_bam_b_file,input_fa_file,lower,upper,bin_size, BASE_DIR, num_of_processors)
    output_file = calc.analyze_bins(chrom_of_interest)


