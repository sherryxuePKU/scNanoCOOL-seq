#!/gpfs1/tangfuchou_pkuhpc/tangfuchou_coe/xuexiaohui/software/miniconda3/envs/cluBCpG/bin/python

import os
import logging
import logging
import argparse
from clubcpg.haploTag_SNV import haploTagging

DEBUG = False

def str2bool(v):
    if v.lower() == 'true':
        return True
    elif v.lower() == 'false':
        return False
    else:
        raise argparse.ArgumentTypeError("Boolean value expected.")

snp_snpsplit="/gpfs1/tangfuchou_pkuhpc/tangfuchou_coe/xuexiaohui/database/mm10/GATK/all_DBA_2J_SNPs_C57BL_6NJ_reference.based_on_GRCm38.sorted.txt"

# Input params
arg_parser = argparse.ArgumentParser()
arg_parser.add_argument("-b", "--input_bam",
                        help="Input bam file, coordinate sorted with index present")
arg_parser.add_argument("-s", "--snp_file",
                        help="Input snp file, default is generated by SNPsplit", default=snp_snpsplit)                      
arg_parser.add_argument("-o", "--output_dir",
                        help="Output directory to save results, defaults to bam file location")
arg_parser.add_argument("-n", "--num_processors",
                        help="Number of processors to use for analysis, default=1",
                        default=4)

if __name__ == "__main__":

    # Extract arguments from command line and set as correct types
    args = arg_parser.parse_args()

    input_bam_file = args.input_bam
    input_snp_file = args.snp_file
    num_of_processors = int(args.num_processors)

    # if args.chromosome:
    #     chrom_of_interest = args.chromosome
    # else:
    #     chrom_of_interest = None

    # For now, this will be made required
    # assert chrom_of_interest, "Chromosome to analyze must be specified"

    # Set output directory, or use bam file location if not specified
    if args.output_dir:
        BASE_DIR = args.output_dir
    else:
        BASE_DIR = os.path.dirname(input_bam_file)

    # Create output dir if it doesnt exist
    if not os.path.exists(BASE_DIR):
        os.makedirs(BASE_DIR)

    # Setup logging
    outfile=os.path.basename(input_bam_file)
    log_file = os.path.join(BASE_DIR, "CompleteSNPs.{}.log".format(outfile))
    print("Log file: {}".format(log_file), flush=True)
    logging.basicConfig(filename=log_file, level=logging.DEBUG)

    logging.info(args)

    # Log run input params
    logging.info("Input bam file: {}".format(input_bam_file))
    logging.info("Input snp file: {}".format(input_snp_file))
    logging.info("Number of processors: {}".format(num_of_processors))

    # Perform the analysis
    parser = haploTagging(input_bam_file, input_snp_file, BASE_DIR, num_of_processors)
    res = parser.analyze_snps()


