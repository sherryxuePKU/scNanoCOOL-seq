"""
Main entry point for nano-bisulfite-haplotag
"""

import argparse
import os
import sys
import logging
from .haplotag import HaploTagger
from .utils import str2bool, setup_logging, validate_file_exists, create_output_directory, get_default_snp_file


def create_parser() -> argparse.ArgumentParser:
    """Create argument parser."""
    parser = argparse.ArgumentParser(
        description="Haplotype tagging for nanopore bisulfite sequencing data",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  nano-bisulfite-haplotag -b input.bam -s snps.txt -o output_dir
  nano-bisulfite-haplotag -b input.bam -s snps.txt -o output_dir -m 3 -f 2.5 -n 8
        """
    )
    
    parser.add_argument(
        "-b", "--input_bam",
        required=True,
        help="Input BAM file, coordinate sorted with index present"
    )
    
    parser.add_argument(
        "-s", "--snp_file",
        help="Input SNP file, default is generated by SNPsplit",
        default=get_default_snp_file()
    )
    
    parser.add_argument(
        "-m", "--min_snp",
        type=int,
        default=2,
        help="Minimum SNPs covered by single reads (default: 2)"
    )
    
    parser.add_argument(
        "-f", "--hap_fc",
        type=float,
        default=2.0,
        help="Minimum fold change of haplotypes, e.g. g1_count/g2_count (default: 2.0)"
    )
    
    parser.add_argument(
        "-o", "--output_dir",
        help="Output directory to save results, defaults to BAM file location"
    )
    
    parser.add_argument(
        "-n", "--num_processors",
        type=int,
        default=4,
        help="Number of processors to use for analysis (default: 4)"
    )
    
    parser.add_argument(
        "--debug",
        action="store_true",
        help="Enable debug logging"
    )
    
    parser.add_argument(
        "--version",
        action="version",
        version="%(prog)s 1.0.0"
    )
    
    return parser


def main():
    """Main entry point."""
    parser = create_parser()
    args = parser.parse_args()
    
    # Validate required arguments
    if not args.snp_file:
        print("Error: SNP file is required. Please specify with -s/--snp_file", file=sys.stderr)
        sys.exit(1)
    
    # Validate input files
    try:
        validate_file_exists(args.input_bam, "BAM file")
        validate_file_exists(f"{args.input_bam}.bai", "BAM index")
        validate_file_exists(args.snp_file, "SNP file")
    except (FileNotFoundError, ValueError) as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)
    
    # Set output directory
    if args.output_dir:
        output_dir = args.output_dir
    else:
        output_dir = os.path.dirname(args.input_bam)
    
    # Create output directory
    try:
        create_output_directory(output_dir)
    except Exception as e:
        print(f"Error creating output directory: {e}", file=sys.stderr)
        sys.exit(1)
    
    # Setup logging
    base_name = os.path.basename(args.input_bam)
    log_file = os.path.join(output_dir, f"haplotag_{base_name}.log")
    setup_logging(log_file, args.debug)
    
    logger = logging.getLogger(__name__)
    logger.info(f"Starting nano-bisulfite-haplotag analysis")
    logger.info(f"Input BAM: {args.input_bam}")
    logger.info(f"SNP file: {args.snp_file}")
    logger.info(f"Output directory: {output_dir}")
    logger.info(f"Min SNPs: {args.min_snp}")
    logger.info(f"Haplotype fold change: {args.hap_fc}")
    logger.info(f"Processors: {args.num_processors}")
    
    try:
        # Create HaploTagger instance
        tagger = HaploTagger(
            bam_file=args.input_bam,
            snp_file=args.snp_file,
            output_dir=output_dir,
            min_snp=args.min_snp,
            hap_fold_change=args.hap_fc,
            num_processors=args.num_processors
        )
        
        # Perform analysis
        stats = tagger.analyze_snps()
        
        # Print summary
        print("\nAnalysis Summary:")
        print("================")
        print(f"Total reads processed: {stats['total_reads']:,}")
        print(f"Reads tagged: {stats['tagged_reads']:,}")
        print(f"HAP1 reads: {stats['hap1_reads']:,}")
        print(f"HAP2 reads: {stats['hap2_reads']:,}")
        print(f"Ambiguous reads: {stats['ambiguous_reads']:,}")
        print(f"Tagging rate: {stats['tagging_rate']:.2%}")
        
        logger.info("Analysis completed successfully")
        
    except Exception as e:
        logger.error(f"Analysis failed: {e}")
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()